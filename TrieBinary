#include<iostream>
#include<algorithm>
#include<cmath>
#include<climits>
#include <cstdio>
using namespace std;

const int MAXN = 30;
//long long arr[MAXN];
short res[MAXN];
struct TrieNode
{
     struct TrieNode *children[2];
     // isEndOfWord is true if the node
     // represents end of a word
};
struct TrieNode *getNode(void)
{
    struct TrieNode *pNode =  new TrieNode;

    for (int i = 0; i <2; i++)
        pNode->children[i] = NULL;

    return pNode;
}

void insertKey(struct TrieNode *root, short key[])
{
    struct TrieNode *pCrawl = root;

    for (int i = 0; i < MAXN; i++)
    {
        int index = key[i];
        if (!pCrawl->children[index])
            pCrawl->children[index] = getNode();

        pCrawl = pCrawl->children[index];
    }
}

void searchKey(struct TrieNode *root, short key[])
{
    struct TrieNode *pCrawl = root;

    for (int i = 0; i < MAXN; i++)
    {
        int index = key[i];
        if (!pCrawl->children[index]) {
            res[i] = 1;
            pCrawl = pCrawl->children[1-index];
        }else{
            res[i] = 0;
            pCrawl = pCrawl->children[index];
        }           //return false;
    }
   // return (pCrawl != NULL );
}
void DFS(struct TrieNode *node){

    if (node->children[0]) DFS(node->children[0]);
    if (node->children[1]) DFS(node->children[1]);
    delete(node);
    return;
}
int main(){
    freopen("input.txt","r",stdin);
    ios_base::sync_with_stdio(0);
    int T,n;
    long x;
    cin >> T;
    while (T>0){
        for(int i=0;i<MAXN;i++) res[i] = 0;
        long result = LONG_MAX;
        struct TrieNode *root = getNode();
        cin >> n;
        cin >> x;
        short tmp[MAXN];// = getBinaryCode(x);
        //-------------------

        for(int i=0;i<MAXN;i++) tmp[i] = 0;
        int tg = MAXN-1;
        while (x>0){
            tmp[tg] = x % 2;
            x /= 2;
            tg--;
        }

        //---------------
        insertKey(root,tmp);

        for(int i=1;i<n;i++) {
            cin >> x;

            for(int i=0;i<MAXN;i++) tmp[i] = 0;
            int tg = MAXN-1;
            while (x>0){
                tmp[tg] = x % 2;
                x /= 2;
                tg--;
            }

            //tmp = getBinaryCode(x);
            searchKey(root,tmp);
            long res_tmp = 0;
            for(int i=0;i<MAXN;i++) if (res[i]==1) res_tmp += pow(2,MAXN-1-i);
            result = min(result,res_tmp);
            insertKey(root,tmp);
        }
        cout << result << "\n";
        DFS(root);
        T--;
    }
    fclose(stdin);
}

